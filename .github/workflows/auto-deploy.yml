name: 🚀 Next.js Auto Build and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🏗️ Build Next.js application
      run: npm run build

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 .next directory contents:"
        ls -la .next/
        echo "📁 Total .next size:"
        du -sh .next/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: ✅ Build Summary
      run: |
        echo "🎉 Docker 镜像构建和推送完成！"
        echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:${{ github.sha }}"
        echo "📦 最新标签: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest"

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "SSH 服务状态:"
          systemctl status ssh --no-pager
          echo "网络连接:"
          netstat -tlnp | grep :22 || echo "SSH 端口未监听"
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始自动化部署 Next.js 应用..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 提交: ${{ github.sha }}"
          
          # 检查并创建项目目录
          PROJECT_DIR="$HOME/airbnb-video"
          echo "📁 项目目录: $PROJECT_DIR"
          
          # 如果目录不存在，克隆项目
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 克隆项目到服务器..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd "$PROJECT_DIR"
            echo "📥 处理本地更改并拉取最新代码..."
            # 保存当前更改
            git stash push -m "Auto stash before pull - $(date)" || echo "没有需要保存的更改"
            # 重置到远程分支
            git fetch origin
            git reset --hard origin/main || git reset --hard origin/master
            git clean -fd
          fi
          
          # 检查 Docker 是否安装
          if ! command -v docker &> /dev/null; then
            echo "📦 安装 Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # 配置 Docker 镜像源（解决网络问题）
          echo "🔧 配置 Docker 镜像源..."
          sudo mkdir -p /etc/docker
          sudo tee /etc/docker/daemon.json <<-'EOF'
          {
            "registry-mirrors": [
              "https://docker.mirrors.ustc.edu.cn",
              "https://hub-mirror.c.163.com",
              "https://mirror.baidubce.com"
            ]
          }
          EOF
          sudo systemctl daemon-reload
          sudo systemctl restart docker
          
          # 检查 Docker Compose 是否安装
          if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
            echo "📦 安装 Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 检查 Docker Compose 版本并设置命令
          if docker compose version &> /dev/null; then
            COMPOSE_CMD="docker compose"
            echo "✅ 使用 Docker Compose v2: $(docker compose version)"
          elif command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="docker-compose"
            echo "✅ 使用 Docker Compose v1: $(docker-compose --version)"
          else
            echo "❌ Docker Compose 未安装"
            exit 1
          fi
          
          # 创建 docker-compose.yml 文件
          echo "📝 创建 docker-compose.yml 文件..."
          cat > docker-compose.yml << 'EOF'
          version: '2.4'
          
          services:
            # Next.js 前端应用
            nextjs-app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
              container_name: airbnb_nextjs_app
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                NODE_ENV: production
                PORT: 8080
                NEXT_PUBLIC_API_URL: http://223.4.248.176:3001
                NEXT_PUBLIC_LOCAL_HOST: http://223.4.248.176:3001
                NEXT_PUBLIC_APP_ID: 9527
              volumes:
                - nextjs_logs:/app/logs
              networks:
                - app-network
          volumes:
            nextjs_logs:
              driver: local
          
          networks:
            app-network:
              driver: bridge
          EOF
          
          # 登录到 GitHub Container Registry
          echo "🔐 登录到 GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像（增加超时时间和重试机制）
          echo "📥 拉取最新 Docker 镜像..."
          
          # 记录当前镜像信息
          echo "📋 当前本地镜像信息:"
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest || echo "本地没有该镜像"
          
          # 尝试拉取镜像，最多重试3次
          PULL_SUCCESS=false
          for i in {1..3}; do
            echo "🔄 第 $i 次尝试拉取镜像..."
            if timeout 300 docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest; then
              echo "✅ 镜像拉取成功！"
              PULL_SUCCESS=true
              break
            else
              echo "❌ 第 $i 次拉取失败，等待 30 秒后重试..."
              sleep 30
            fi
          done
          
          # 如果拉取失败，尝试本地构建
          if [ "$PULL_SUCCESS" = false ]; then
            echo "⚠️ 所有拉取尝试都失败了，尝试本地构建..."
            
            # 检查是否有 Dockerfile
            if [ ! -f "Dockerfile" ]; then
              echo "❌ 错误：找不到 Dockerfile，无法进行本地构建"
              exit 1
            fi
            
            # 尝试本地构建
            if timeout 600 docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest .; then
              echo "✅ 本地构建成功！"
            else
              echo "❌ 本地构建也失败了"
              echo "📋 检查网络连接和 Docker 配置..."
              docker info
              echo "📋 尝试测试基础镜像拉取..."
              docker pull node:18-alpine || echo "基础镜像拉取失败"
              exit 1
            fi
          fi
          
          # 验证镜像是否成功获取
          echo "🔍 验证镜像..."
          if docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest | grep -q "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video"; then
            echo "✅ 镜像验证成功"
            docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
            
            # 验证镜像创建时间（确保是最新的）
            echo "🔍 验证镜像创建时间..."
            IMAGE_CREATED=$(docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest --format='{{.Created}}')
            echo "📅 镜像创建时间: $IMAGE_CREATED"
            
            # 检查镜像是否在最近1小时内创建
            IMAGE_TIMESTAMP=$(date -d "$IMAGE_CREATED" +%s 2>/dev/null || echo "0")
            CURRENT_TIMESTAMP=$(date +%s)
            TIME_DIFF=$((CURRENT_TIMESTAMP - IMAGE_TIMESTAMP))
            
            if [ $TIME_DIFF -lt 3600 ]; then
              echo "✅ 镜像是最新的（创建于 $((TIME_DIFF/60)) 分钟前）"
            else
              echo "⚠️ 警告：镜像可能不是最新的（创建于 $((TIME_DIFF/3600)) 小时前）"
            fi
          else
            echo "❌ 镜像验证失败，没有找到目标镜像"
            exit 1
          fi
          
          # 停止并删除现有容器
          echo "🛑 停止现有容器..."
          $COMPOSE_CMD down || true
          
          # 强制删除旧镜像（如果存在）
          echo "🧹 清理旧镜像..."
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest 2>/dev/null || echo "没有旧镜像需要删除"
          
          # 验证镜像版本
          echo "🔍 验证镜像版本信息..."
          docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest | grep -E "(Created|Id|RepoTags)" || echo "无法获取镜像详细信息"
          
          # 启动服务
          echo "🚀 启动 Docker 服务..."
          $COMPOSE_CMD up -d
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 30
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          $COMPOSE_CMD ps
          
          # 健康检查
          echo "🔍 开始健康检查..."
          
          # 等待更长时间确保服务完全启动
          echo "⏳ 等待服务完全启动..."
          sleep 60
          
          # 检查容器状态
          echo "📋 容器状态检查:"
          $COMPOSE_CMD ps
          
          # 检查容器日志
          echo "📋 容器日志检查:"
          $COMPOSE_CMD logs --tail=50 nextjs-app
          
          # 多次健康检查
          HEALTH_CHECK_PASSED=false
          for i in {1..5}; do
            echo "🔍 第 $i 次健康检查..."
            if curl -f -m 30 http://localhost:8080 > /dev/null 2>&1; then
              echo "✅ 健康检查通过！"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "❌ 第 $i 次健康检查失败，等待 10 秒..."
              sleep 10
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ 部署成功！"
            echo "🌐 应用地址: http://${{ secrets.HOST }}:8080"
            echo "📦 部署版本: ${{ github.sha }}"
            echo "📦 镜像信息: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest"
          else
            echo "❌ 健康检查失败"
            echo "📋 查看详细日志:"
            $COMPOSE_CMD logs nextjs-app
            echo "📋 检查容器状态:"
            docker ps -a
            exit 1
          fi
          
          echo "🎉 自动化部署完成！" 