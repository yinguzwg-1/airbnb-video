name: 🚀 Next.js Auto Build and Deploy

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🏗️ Build Next.js application
      run: npm run build

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 .next directory contents:"
        ls -la .next/
        echo "📁 Total .next size:"
        du -sh .next/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: ✅ Build Summary
      run: |
        echo "🎉 Docker 镜像构建和推送完成！"
        echo "📦 镜像地址: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:${{ github.sha }}"
        echo "📦 最新标签: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest"

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "SSH 服务状态:"
          systemctl status ssh --no-pager
          echo "网络连接:"
          netstat -tlnp | grep :22 || echo "SSH 端口未监听"
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "300s"
        script: |
          echo "🚀 开始自动化部署 Next.js 应用..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 提交: ${{ github.sha }}"
          
          # 检查并创建项目目录
          PROJECT_DIR="$HOME/airbnb-video"
          echo "📁 项目目录: $PROJECT_DIR"
          
          # 如果目录不存在，克隆项目
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 克隆项目到服务器..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd "$PROJECT_DIR"
            echo "📥 拉取最新代码..."
            git pull origin main
          fi
          
          # 检查 Docker 是否安装
          if ! command -v docker &> /dev/null; then
            echo "📦 安装 Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            sudo usermod -aG docker $USER
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # 检查 Docker Compose 是否安装
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 安装 Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 创建 docker-compose.yml 文件
          echo "📝 创建 docker-compose.yml 文件..."
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          
          services:
            # Next.js 前端应用
            nextjs-app:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
              container_name: airbnb_nextjs_app
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                NODE_ENV: production
                PORT: 8080
                NEXT_PUBLIC_API_URL: http://localhost:3001
              volumes:
                - nextjs_logs:/app/logs
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
          volumes:
            nextjs_logs:
              driver: local
          
          networks:
            app-network:
              driver: bridge
          EOF
          
          # 登录到 GitHub Container Registry
          echo "🔐 登录到 GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 拉取最新镜像
          echo "📥 拉取最新 Docker 镜像..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video:latest
          
          # 停止并删除现有容器
          echo "🛑 停止现有容器..."
          docker-compose down || true
          
          # 启动服务
          echo "🚀 启动 Docker 服务..."
          docker-compose up -d
          
          # 等待服务启动
          echo "⏳ 等待服务启动..."
          sleep 30
          
          # 检查服务状态
          echo "📋 检查服务状态..."
          docker-compose ps
          
          # 健康检查
          if curl -f http://localhost:8080 > /dev/null 2>&1; then
            echo "✅ 部署成功！"
            echo "🌐 应用地址: http://${{ secrets.HOST }}:8080"
            echo "📦 部署版本: ${{ github.sha }}"
          else
            echo "⚠️  健康检查失败，但服务可能仍在启动中..."
            echo "📋 查看日志: docker-compose logs nextjs-app"
          fi
          
          echo "🎉 自动化部署完成！" 