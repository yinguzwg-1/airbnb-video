name: 🚀 Next.js Auto Build and Deploy with Docker

# 触发条件：main/master 分支推送 或 手动触发
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

# 全局环境变量
env:
  REGISTRY: ghcr.io                  # GitHub 容器仓库地址
  IMAGE_NAME: ${{ github.repository_owner }}  # 仓库所有者（自动获取，无需修改）
  APP_NAME: airbnb-video             # 应用名称（与镜像、容器名关联）
  CONTAINER_NAME: airbnb-video-app   # 容器名称
  PORT: 8080                         # 服务器暴露端口（需与应用内部端口匹配）

# 权限配置（GHCR 推送需要）
permissions:
  contents: read                     # 读取代码权限
  packages: write                    # 推送容器镜像权限

jobs:
  # 第一阶段：构建并推送 Docker 镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    outputs:
      # 输出关键标签，供部署阶段使用（确保标签完全一致）
      latest_tag: ${{ steps.meta.outputs.tags }}  # 包含 latest 标签和短 SHA 标签
      short_sha_tag: ${{ steps.extract_tag.outputs.short_sha_tag }}  # 短 SHA 标签（如 main-e37f1b9）
    
    steps:
      # 1. 拉取代码
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. 初始化 Docker Buildx（优化构建速度和兼容性）
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. 登录 GHCR（使用 PAT 令牌，避免临时令牌失效）
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}  # 当前 GitHub 用户名（自动获取）
          password: ${{ secrets.GHCR_PAT }}  # 需在仓库 Secrets 中添加 GHCR_PAT（个人访问令牌）

      # 4. 生成镜像标签（统一标签格式，避免不匹配）
      - name: 🏷️ Extract image metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}
          tags: |
            # 标签1：短 SHA 标签（格式：分支名-短SHA，如 main-e37f1b9）
            type=sha,prefix=${{ github.ref_name }}-,format=short
            # 标签2：latest 标签（仅默认分支生效，确保最新镜像用 latest 标记）
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.branch=${{ github.ref_name }}

      # 5. 提取短 SHA 标签（供部署阶段单独使用）
      - name: 📌 Extract short SHA tag
        id: extract_tag
        run: |
          # 从所有标签中筛选出 "分支名-短SHA" 格式的标签（如 main-e37f1b9）
          SHORT_SHA_TAG=$(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | grep "${{ github.ref_name }}-" | head -1)
          echo "short_sha_tag=$SHORT_SHA_TAG" >> $GITHUB_OUTPUT
          echo "✅ 提取短 SHA 标签：$SHORT_SHA_TAG"

      # 6. 构建并推送镜像（启用缓存，加速后续构建）
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .                     # 构建上下文（代码根目录）
          file: ./Dockerfile             # Dockerfile 路径（确保项目根目录有此文件）
          push: true                     # 推送镜像到 GHCR
          tags: ${{ steps.meta.outputs.tags }}  # 使用生成的标签（避免手动写标签）
          labels: ${{ steps.meta.outputs.labels }}  # 镜像元数据标签
          cache-from: type=gha           # 从 GitHub Actions 缓存拉取构建层
          cache-to: type=gha,mode=max    # 推送构建层到缓存（最大化缓存）
          # 传递构建参数（与项目所需环境变量匹配）
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=http://223.4.248.176:3001
            NEXT_PUBLIC_LOCAL_HOST=http://223.4.248.176:3001
            NEXT_PUBLIC_APP_ID=9527

  # 第二阶段：部署到阿里云服务器（依赖第一阶段完成）
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # 等待构建阶段完成
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      # 1. 拉取代码（若部署脚本需要本地文件，可保留；否则可删除）
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # 2. 测试服务器连接（提前排查 SSH 问题）
      - name: 🔍 Test server connectivity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}       # 服务器公网 IP（在 Secrets 中配置）
          username: ${{ secrets.USERNAME }} # 服务器登录用户名（如 root，在 Secrets 中配置）
          key: ${{ secrets.SSH_KEY }}     # SSH 私钥（在 Secrets 中配置）
          port: ${{ secrets.PORT || 22 }} # 服务器 SSH 端口（默认 22，在 Secrets 中配置）
          command_timeout: "30s"          # 命令超时时间
          script: |
            echo "🔍 测试服务器连接成功！"
            echo "🖥️ 服务器信息: $(uname -a)"
            echo "🐳 Docker 版本: $(docker --version)"
            echo "✅ Docker 服务状态: $(systemctl is-active docker)"

      # 3. 核心部署步骤：拉取镜像 + 启动容器
      - name: 🚀 Deploy to server (Docker)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT || 22 }}
          command_timeout: "600s"  # 部署命令超时时间（拉取镜像可能耗时）
          script: |
            # 定义关键变量（与构建阶段一致）
            IMAGE_FULL_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}"
            SHORT_SHA_TAG="${{ needs.build-and-push.outputs.short_sha_tag }}"  # 从构建阶段获取标签
            LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ env.APP_NAME }}:latest"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.PORT }}"

            echo "🚀 开始部署 ${{ env.APP_NAME }} 应用..."
            echo "🌍 部署环境: ${{ github.event.inputs.environment || 'production' }}"
            echo "📦 分支: ${{ github.ref_name }} | 提交: ${{ github.sha }}"
            echo "🐳 镜像: $SHORT_SHA_TAG（或 $LATEST_TAG）"
            echo "📦 容器: $CONTAINER_NAME | 端口: $PORT"

            # 步骤1：登录 GHCR（服务器端需重新登录才能拉取私有镜像）
            echo "🔐 服务器登录 GHCR..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin || {
              echo "❌ GHCR 登录失败！请检查 PAT 令牌权限";
              exit 1;
            }

            # 步骤2：拉取最新镜像（优先用短 SHA 标签，确保版本唯一）
            echo "📥 拉取镜像: $SHORT_SHA_TAG..."
            docker pull $SHORT_SHA_TAG || {
              echo "⚠️ 短 SHA 标签镜像拉取失败，尝试拉取 latest 标签...";
              docker pull $LATEST_TAG;
              # 拉取 latest 后，重新赋值标签（确保后续使用正确）
              SHORT_SHA_TAG=$LATEST_TAG;
            }

            # 步骤3：停止并删除旧容器（避免端口冲突）
            echo "🛑 清理旧容器..."
            # 停止运行中的容器
            if docker ps -q -f name=$CONTAINER_NAME; then
              docker stop $CONTAINER_NAME && echo "✅ 旧容器已停止";
            else
              echo "ℹ️ 没有运行中的旧容器";
            fi
            # 删除已停止的容器
            if docker ps -aq -f name=$CONTAINER_NAME; then
              docker rm $CONTAINER_NAME && echo "✅ 旧容器已删除";
            else
              echo "ℹ️ 没有旧容器需要删除";
            fi

            # 步骤4：清理悬空镜像（释放服务器磁盘空间）
            echo "🧹 清理悬空镜像..."
            docker image prune -f && echo "✅ 悬空镜像清理完成"

            # 步骤5：启动新容器（关键：用拉取成功的标签，配置自动重启）
            echo "🚀 启动新容器: $CONTAINER_NAME..."
            docker run -d \
              --name $CONTAINER_NAME \
              --restart unless-stopped \
              -p $PORT:8080 \
              -e NODE_ENV=production \
              -e NEXT_PUBLIC_API_URL="http://223.4.248.176:3001" \
              -e NEXT_PUBLIC_LOCAL_HOST="http://223.4.248.176:3001" \
              -e NEXT_PUBLIC_APP_ID="9527" \
              $SHORT_SHA_TAG || {
                echo "❌ 容器启动失败！";
                exit 1;
              }

            # 步骤6：验证容器状态
            echo "🔍 验证容器状态..."
            sleep 5  # 等待容器启动（根据应用启动速度调整）
            if docker ps | grep -q $CONTAINER_NAME; then
              echo "✅ 容器启动成功！";
              docker ps | grep $CONTAINER_NAME;  # 显示容器信息
            else
              echo "❌ 容器启动失败，查看日志:";
              docker logs $CONTAINER_NAME --tail 50;  # 输出最新日志
              exit 1;
            fi

            # 步骤7：健康检查（验证应用是否可访问）
            echo "🔍 应用健康检查（共 10 次重试）..."
            HEALTH_CHECK_PASSED=false
            for i in {1..10}; do
              if curl -m 10 http://localhost:$PORT > /dev/null 2>&1; then
                HEALTH_CHECK_PASSED=true;
                break;
              else
                echo "ℹ️ 第 $i 次健康检查失败，等待 5 秒重试...";
                sleep 5;
              fi
            done

            # 最终结果提示
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "🎉 部署成功！";
              echo "🌐 应用访问地址: http://${{ secrets.HOST }}:$PORT";
              echo "📦 部署版本: ${{ github.sha }}";
              echo "🐳 容器状态: 正常运行";
            else
              echo "❌ 健康检查失败！应用无法访问";
              echo "📋 应用日志:";
              docker logs $CONTAINER_NAME --tail 100;
              exit 1;
            fi