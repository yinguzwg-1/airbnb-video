name: 🚀 Next.js Auto Build and Deploy with Docker

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送 Docker 镜像
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=http://223.4.248.176:3001
          NEXT_PUBLIC_LOCAL_HOST=http://223.4.248.176:3001
          NEXT_PUBLIC_APP_ID=9527
          NODE_ENV=production

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "Docker 服务状态:"
          systemctl status docker --no-pager
          echo "Docker 版本:"
          docker --version
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy with Docker
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始 Docker 部署 Next.js 应用..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 触发分支: ${{ github.ref_name }}"
          echo "📦 最新提交: ${{ github.sha }}"
          echo "🐳 镜像标签: ${{ github.ref_name }}-${{ github.sha }}"

          # 设置变量
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/airbnb-video"
          CONTAINER_NAME="airbnb-video-app"
          PORT="8080"
          
          echo "📁 镜像名称: $IMAGE_NAME"
          echo "📦 容器名称: $CONTAINER_NAME"
          echo "🌐 端口: $PORT"

          # 登录到 GitHub Container Registry
          echo "🔐 登录到 GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

          # 拉取最新镜像
          echo "📥 拉取最新镜像..."
          docker pull $IMAGE_NAME:${{ github.ref_name }}-${{ github.sha }} || docker pull $IMAGE_NAME:latest

          # 停止并删除旧容器
          echo "🛑 停止旧容器..."
          if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
            docker stop $CONTAINER_NAME
            echo "✅ 旧容器已停止"
          else
            echo "ℹ️ 没有运行中的旧容器"
          fi

          if docker ps -aq -f name=$CONTAINER_NAME | grep -q .; then
            docker rm $CONTAINER_NAME
            echo "✅ 旧容器已删除"
          else
            echo "ℹ️ 没有旧容器需要删除"
          fi

          # 清理悬空镜像
          echo "🧹 清理悬空镜像..."
          docker image prune -f

          # 启动新容器
          echo "🚀 启动新容器..."
          docker run -d \
            --name $CONTAINER_NAME \
            --restart unless-stopped \
            -p $PORT:3000 \
            -e NODE_ENV=production \
            -e NEXT_PUBLIC_API_URL="http://223.4.248.176:3001" \
            -e NEXT_PUBLIC_LOCAL_HOST="http://223.4.248.176:3001" \
            -e NEXT_PUBLIC_APP_ID="9527" \
            $IMAGE_NAME:${{ github.ref_name }}-${{ github.sha }} || $IMAGE_NAME:latest

          # 等待容器启动
          echo "⏳ 等待容器启动..."
          sleep 10

          # 检查容器状态
          echo "🔍 检查容器状态..."
          if docker ps | grep -q $CONTAINER_NAME; then
            echo "✅ 容器启动成功"
            docker ps | grep $CONTAINER_NAME
          else
            echo "❌ 容器启动失败"
            echo "📋 容器日志:"
            docker logs $CONTAINER_NAME
            exit 1
          fi

          # 健康检查
          echo "🔍 开始健康检查..."
          HEALTH_CHECK_PASSED=false
          for i in {1..10}; do
            echo "🔍 第 $i 次健康检查..."
            if curl -f -m 30 http://localhost:$PORT > /dev/null 2>&1; then
              echo "✅ 健康检查通过！"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "❌ 第 $i 次健康检查失败，等待 10 秒..."
              sleep 10
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ 部署成功！"
            echo "🌐 应用地址: http://${{ secrets.HOST }}:$PORT"
            echo "📦 部署版本: ${{ github.sha }}"
            echo "🐳 容器状态:"
            docker ps | grep $CONTAINER_NAME
            echo "📊 容器资源使用:"
            docker stats $CONTAINER_NAME --no-stream
          else
            echo "❌ 健康检查失败"
            echo "📋 查看详细日志:"
            docker logs $CONTAINER_NAME --tail 50
            exit 1
          fi

          echo "🎉 Docker 自动化部署完成！"