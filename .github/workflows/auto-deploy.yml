name: 🚀 Next.js Auto Build and Deploy with PM2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write

jobs:
  # 构建和推送镜像
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run linting
      run: npm run lint

    - name: 🏗️ Build Next.js application
      run: |
        echo "🏗️ 开始构建 Next.js 应用..."
        
        # 使用环境文件设置环境变量
        if [ -f "env.production" ]; then
          echo "📁 加载生产环境配置..."
          export $(cat env.production | xargs)
        fi
        
        # 确保环境变量在构建时可用
        export NODE_ENV=production
        export NEXT_PUBLIC_NODE_ENV=production
        export PORT=8080
        export NEXT_PUBLIC_API_URL="http://223.4.248.176:3001"
        export NEXT_PUBLIC_LOCAL_HOST="http://223.4.248.176:3001"
        export NEXT_PUBLIC_APP_ID="9527"
        
        echo "🔧 当前环境变量:"
        echo "  - NODE_ENV: $NODE_ENV"
        echo "  - NEXT_PUBLIC_NODE_ENV: $NEXT_PUBLIC_NODE_ENV"
        echo "  - NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
        echo "  - NEXT_PUBLIC_LOCAL_HOST: $NEXT_PUBLIC_LOCAL_HOST"
        echo "  - NEXT_PUBLIC_APP_ID: $NEXT_PUBLIC_APP_ID"
        # 执行构建
        npm run build

    - name: ✅ Verify build output
      run: |
        echo "✅ Build completed successfully"
        echo "📁 Current directory: $(pwd)"
        echo "📁 .next directory contents:"
        ls -la .next/
        echo "📁 Total .next size:"
        du -sh .next/

  # 部署到服务器
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Test server connectivity
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "30s"
        script: |
          echo "🔍 测试服务器连接..."
          echo "服务器信息:"
          uname -a
          echo "SSH 服务状态:"
          systemctl status ssh --no-pager
          echo "网络连接:"
          netstat -tlnp | grep :22 || echo "SSH 端口未监听"
          echo "✅ 连接测试完成"

    - name: 🚀 Deploy Next.js with PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        command_timeout: "600s"
        script: |
          echo "🚀 开始自动化部署 Next.js 应用..."
          echo "🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
          echo "📦 触发分支: ${{ github.ref_name }}"  # 输出当前分支
          echo "📦 最新提交: ${{ github.sha }}"      # 输出最新 commit hash

          PROJECT_DIR="$HOME/airbnb-video"
          echo "📁 项目目录: $PROJECT_DIR"
          
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "📥 首次克隆项目..."
            mkdir -p "$PROJECT_DIR"
            cd "$PROJECT_DIR"
            git clone https://github.com/${{ github.repository }}.git .
          else
            cd "$PROJECT_DIR"
            echo "📥 拉取最新代码（分支：${{ github.ref_name }}）..."
            #  stash 本地更改（如有）
            git stash push -m "Auto stash before pull - $(date)" || echo "无本地更改需保存"
            # 拉取当前分支的最新代码
            git fetch origin ${{ github.ref_name }}
            # 强制重置到远程分支的最新提交
            git reset --hard origin/${{ github.ref_name }}
            # 清理未跟踪文件（如旧的构建产物）
            git clean -fd
            # 验证拉取结果
            echo "✅ 当前代码 commit：$(git rev-parse HEAD)"
          fi

          # 安装依赖
          echo "📦 安装依赖..."
          npm ci

          # 服务器上重新构建（关键步骤）
          echo "🏗️ 重新构建应用..."
          export NODE_ENV=production
          export NEXT_PUBLIC_API_URL="http://223.4.248.176:3001"
          export NEXT_PUBLIC_LOCAL_HOST="http://223.4.248.176:3001"
          export NEXT_PUBLIC_APP_ID="9527"
          npm run build

          # 验证构建产物
          echo "📦 构建产物信息："
          ls -la .next
          du -sh .next

          # 重启应用
          echo "🚀 重启应用..."
          npm run pm2:delete nextjs-app || true
          npm run pm2:start:prod


          # 健康检查
          echo "🔍 开始健康检查..."
          HEALTH_CHECK_PASSED=false
          for i in {1..5}; do
            echo "🔍 第 $i 次健康检查..."
            if curl -f -m 30 http://localhost:8080 > /dev/null 2>&1; then
              echo "✅ 健康检查通过！"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "❌ 第 $i 次健康检查失败，等待 10 秒..."
              sleep 10
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ 部署成功！"
            echo "🌐 应用地址: http://${{ secrets.HOST }}:8080"
            echo "📦 部署版本: ${{ github.sha }}"
          else
            echo "❌ 健康检查失败"
            echo "📋 查看详细日志:"
            npm run pm2:logs
            exit 1
          fi

          echo "🎉 自动化部署完成！"
